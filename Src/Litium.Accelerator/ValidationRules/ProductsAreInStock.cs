using Litium.Accelerator.Routing;
using Litium.Foundation.Modules.ECommerce;
using Litium.Foundation.Modules.ECommerce.Carriers;
using Litium.Foundation.Modules.ECommerce.Plugins.Checkout;
using Litium.Foundation.Modules.ECommerce.Plugins.Orders;
using Litium.Foundation.Modules.ECommerce.ShoppingCarts;
using Litium.Foundation.Modules.ExtensionMethods;
using Litium.Foundation.Security;
using Litium.Products;
using Litium.Products.StockStatusCalculator;
using Litium.Studio.Extenssions;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Web;

namespace Litium.Accelerator.ValidationRules
{
    /// <summary>
    ///     Validate order whether products is in stock.
    /// </summary>
    public class ProductsAreInStock : IPreOrderValidationRule
    {
        private readonly ModuleECommerce _moduleECommerce;
        private readonly SecurityToken _securityToken;
        private readonly IStockStatusCalculator _stockStatusCalculator;
        private readonly VariantService _variantService;
        private readonly RequestModelAccessor _requestModelAccessor;
        private Cart Cart => _requestModelAccessor.RequestModel.Cart;

        public ProductsAreInStock(ModuleECommerce moduleECommerce, SecurityToken securityToken, IStockStatusCalculator stockStatusCalculator, VariantService variantService, RequestModelAccessor requestModelAccessor)
        {
            _moduleECommerce = moduleECommerce;
            _securityToken = securityToken;
            _stockStatusCalculator = stockStatusCalculator;
            _variantService = variantService;
            _requestModelAccessor = requestModelAccessor;
        }

        /// <summary>
        ///     Validates the specified order carrier.
        /// </summary>
        /// <param name="orderCarrier"> The order carrier. </param>
        /// <param name="checkoutFlowInfo"> The checkout flow info. </param>
        public void Validate(OrderCarrier orderCarrier, CheckoutFlowInfo checkoutFlowInfo)
        {
            if (orderCarrier.OrderRows.Count > 0)
            {
                var personId = orderCarrier.CustomerInfo?.PersonID ?? _securityToken.UserID;
                var articlesPurchased = orderCarrier.OrderRows
                                                    .Where(o => !o.CarrierState.IsMarkedForDeleting && !o.IsAutoGenerated)
                                                    .GroupBy(o => o.ArticleNumber)
                                                    .Select(g => new { ArticleNumber = g.Key, Quantity = g.Sum(p => p.Quantity) });

                var outOfStocksProducts = new List<string>();
                var notEnoughInStocksProducts = new List<string>();
                foreach (var item in articlesPurchased)
                {
                    var article = _variantService.Get(item.ArticleNumber);
                    if (article != null)
                    {
                        StockStatusCalculatorResult stockStatus;
                        _stockStatusCalculator.GetStockStatuses(new StockStatusCalculatorArgs
                        {
                            Date = HttpContext.Current.Timestamp,
                            UserSystemId = personId,
                            WebSiteSystemId = orderCarrier.WebSiteID,
                            CountrySystemId = orderCarrier.CountryID
                        }, new StockStatusCalculatorItemArgs
                        {
                            VariantSystemId = article.SystemId,
                            Quantity = item.Quantity
                        }).TryGetValue(article.SystemId, out stockStatus);

                        //if stock status is not returned or the actual stock level is zero or below.
                        if (stockStatus == null || stockStatus.InStockQuantity.GetValueOrDefault() <= decimal.Zero)
                        {
                            //remove the order row from order carrier.
                            foreach (var orderRow in orderCarrier.OrderRows.Where(x => x.ArticleNumber == article.Id).ToList())
                            {
                                //we have to call edit order row to handle the correct removal from delivery, and to provide access to extension point.
                                _moduleECommerce.CheckoutFlow.EditOrderRow(orderCarrier, orderRow.ID, 0, string.Empty, 0, _moduleECommerce.AdminToken);
                                Cart.UpdateRowQuantity(orderRow.ID, 0);
                            }

                            outOfStocksProducts.Add(article.GetDisplayName(CultureInfo.CurrentCulture));
                        }
                        else
                        {
                            var existingStocks = stockStatus.InStockQuantity.GetValueOrDefault();
                            var notEnoughStocks = false;
                            foreach (var orderRow in orderCarrier.OrderRows
                                                                 .Where(x => x.ArticleNumber == article.Id && !x.CarrierState.IsMarkedForDeleting)
                                                                 .OrderByDescending(x => x.IsAutoGenerated)
                                                                 .ToList()
                            )
                            {
                                if (existingStocks >= decimal.Zero)
                                {
                                    if (orderRow.Quantity > existingStocks)
                                    {
                                        //we have to call edit order row to handle the correct removal from delivery, and to provide access to extension point.
                                        var changedRow = _moduleECommerce.CheckoutFlow.EditOrderRow(orderCarrier, orderRow.ID, existingStocks, orderRow.Comments, orderRow.DiscountPercentage, _moduleECommerce.AdminToken);
                                        notEnoughStocks = true;
                                        existingStocks -= changedRow.Quantity;
                                        Cart.UpdateRowQuantity(changedRow.ID, changedRow.Quantity);
                                    }
                                    else
                                    {
                                        existingStocks -= orderRow.Quantity;
                                    }
                                }
                                else
                                {
                                    //we have to call edit order row to handle the correct removal from delivery, and to provide access to extension point.
                                    _moduleECommerce.CheckoutFlow.EditOrderRow(orderCarrier, orderRow.ID, 0, string.Empty, 0, _moduleECommerce.AdminToken);
                                    notEnoughStocks = true;
                                    Cart.UpdateRowQuantity(orderRow.ID, 0);
                                }
                            }

                            if (notEnoughStocks)
                            {
                                notEnoughInStocksProducts.Add(article.GetDisplayName(CultureInfo.CurrentCulture));
                            }
                        }
                    }
                }

                if (outOfStocksProducts.Count > 0 || notEnoughInStocksProducts.Count > 0)
                {
                    Cart.UpdateChangedRows();

                    var sb = new StringBuilder();
                    if (outOfStocksProducts.Count > 0)
                    {
                        var outOfStocksMsg = "accelerator.validation.product.outofstock".AsAngularResourceString();
                        outOfStocksProducts.ForEach(x => sb.AppendFormat(outOfStocksMsg, x));
                    }
                    if (notEnoughInStocksProducts.Count > 0)
                    {
                        var notEnoughInStocksProductsMsg = "accelerator.validation.product.notenoughinstock".AsAngularResourceString();
                        notEnoughInStocksProducts.ForEach(x => sb.AppendFormat(notEnoughInStocksProductsMsg, x));
                    }
                    throw new PreOrderValidationException(sb.ToString());
                }
            }
        }
    }
}

